#!/usr/bin/nodejs

// INITIALIZATION STUFF
var express = require('express');                     // import express
var app = express();                                  // create an app from express
var server =  require('http').createServer(app);      // import http and create a server
var io = require('socket.io').listen(server);         // attach socket.io to the server

var util = require('util')
var mysql = require('mysql');

var hbs = require('hbs');

var cookieSession = require('cookie-session')
var simpleoauth2 = require("simple-oauth2");
var request = require('request');


// PORT SETUP - NUMBER SPECIFIC TO THIS SYSTEM
server.listen(process.env.PORT || 8080);              // listen for incoming connections

// -------------- variables  -------------- //
var button_count = 0;


// -------------- hbs stuff  -------------- //
app.set('view engine', 'hbs');

// -------------- cookie stuff  -------------- //
app.set('trust proxy', 1) // trust first proxy 
app.use(cookieSession({
  name: 'bubbawubba',
  keys: ['SomeSecretKeyslalala', 'ThatYouShouldChange456']
}))


// -------------- mysql initialization  -------------- //
var pool  = mysql.createPool({
  connectionLimit : 10,
  user            : 'things',
  password        : 'that',
  host            : 'you',
  port            : can,
  database        : 'figure out'    
});


// -------------- Oauth2 initialization  -------------- //

var ion_client_id = 'theshortone_sdfajskdfhj';
var ion_client_secret = 'thelongone_asdfjaksdfalskdfjalsdkfjasldkfjalskdfj';
var ion_redirect_uri = 'https://user.tjhsst.edu/pckosek/login';

var oauth2 = simpleoauth2.create({
  client: {
    id: ion_client_id,
    secret: ion_client_secret,
  },
  auth: {
    tokenHost: 'https://ion.tjhsst.edu/oauth/',
    authorizePath: 'https://ion.tjhsst.edu/oauth/authorize',
    tokenPath: 'https://ion.tjhsst.edu/oauth/token/'
  }
});

var authorizationUri = oauth2.authorizationCode.authorizeURL({
    scope: "read",
    redirect_uri: ion_redirect_uri
});

// -------------- express getter -------------- //
app.get('/', function (req, res, next) {
    
    var renderParams;
    if (typeof req.session.token == 'undefined') {
        // NOT LOGGED IN
        renderParams = {
            loginlink : authorizationUri,
            loginDisabled : "",
            buttonDisabled : "disabled"
        }
    } else {
        // LOGGED IN
        renderParams = {
            loginlink : authorizationUri,
            loginDisabled : "disabled",
            buttonDisabled : ""
        }
        console.log(req.session.user_name);
    }
    res.render('index', renderParams);
    
});

app.get('/fcn_on', function (req, res, next) {
    io.emit('server_off', true);
    pool.query('CALL add_entry(?, ?)', ['ON',req.session.user_name], function (error, results, fields) {
        res.json({status : 'ok' });
    });
});

app.get('/fcn_off', function (req, res, next) {
    io.emit('server_on', true);
    pool.query('CALL add_entry(?,?)', ['OFF',req.session.user_name], function (error, results, fields) {
        res.json({status : 'ok' });
    });
});


app.get('/status', function(req, res){
    pool.query('SELECT * FROM smart_led', function (error, results, fields) {
      if (error) throw error;
      
      
      res.json( {status : results} );
    })
    
})

// -------------- oauth login page -------------- //
app.get('/login', async function (req, res) {

    // The whole purpose of this 'get' handler is to attach your  token to the session. 
    // Your users should not be going here if they are not trying to login in - and you
    // should not be attaching your login token in any other methods (like the default landing page)

    // Step one. Assuming we were send here following an authentication and that there is a code attached.
    if (typeof req.query.code != 'undefined') {
        
        // This code was generated by ION. We need it to...
        var theCode = req.query.code 

        // .. construct options that will be used to generate a login token
        var options = {
            code: theCode,
            redirect_uri: ion_redirect_uri,
            scope: 'read'
         };

        // This code will be passed back to ion to request a token.
        result = await oauth2.authorizationCode.getToken(options);
        token = oauth2.accessToken.create(result);
        
        // attach the token to the cookie
        req.session.token = token;
        
        var access_token = req.session.token.token.access_token;
        
        var my_ion_request = 'https://ion.tjhsst.edu/api/profile?format=json&access_token='+access_token;

        request.get( {url:my_ion_request}, function (e, r, body) {
            var res_object = JSON.parse(body);
            user_name = res_object['display_name'];
            req.session.user_name = user_name;
        
            res.redirect('https://user.tjhsst.edu/pckosek');
        });

    } else {
        res.send('no code attached')
    }
});

// -------------- socket initialization -------------- //
io.on('connection',function(socket){                  // called when a new socket connection is made

    console.log('new socket connection');
        
    socket.on('client_key', function(obj){            // server side socket callbacks for events
            
        console.log(obj['on']);
        if ( obj['on'] == true ) {
            io.emit('server_on', true);        // server server-side emit to all clients
        } else {
            io.emit('server_off', true);        // server server-side emit to all clients            
        }
        
    })

})